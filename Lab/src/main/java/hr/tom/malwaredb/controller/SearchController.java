package hr.tom.malwaredb.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import hr.tom.malwaredb.entity.DatabaseManager;
import hr.tom.malwaredb.entity.MalwareObject;

/**
 * Controller class used for searching pages.
 * 
 * @author Tom.K
 *
 */
@Controller
public class SearchController {

	@Autowired
	JdbcTemplate jdbcTemplate;

	/**
	 * Generates "search" template page, looking for entries with defined
	 * parameters.
	 * 
	 * @param model
	 *            Template model.
	 * @param name
	 *            Name of malware.
	 * @param type
	 *            Type of malware.
	 * @param platform
	 *            Platform of malware.
	 * @param source
	 *            Source of malware;
	 * @param filetype
	 *            File type of malware.
	 * @param size
	 *            File size of malware.
	 * @param author
	 *            Author of malware.
	 * @param origin
	 *            Country origin of malware.
	 * @param discoverydate
	 *            Discovery date of malware.
	 * @return Template page "search.html".
	 */
	@RequestMapping("/search")
	public String results(Model model, @RequestParam(value = "name", required = false) String name,
			@RequestParam(value = "type", required = false) String type,
			@RequestParam(value = "platform", required = false) String platform,
			@RequestParam(value = "source_language", required = false) String sourceLanguage,
			@RequestParam(value = "file_type", required = false) String fileType,
			@RequestParam(value = "size", required = false) Integer size,
			@RequestParam(value = "author", required = false) String author,
			@RequestParam(value = "origin", required = false) String origin,
			@RequestParam(value = "date_discovery", required = false) @DateTimeFormat(pattern = "yyyy-MM-dd") Date dateDiscovery) {

		// Template query.
		String searchQuery = "SELECT `id`,`name`,`type`,`platform`,`source_language`,`file_type`,`size`,`author`,`origin`,`date_discovery` FROM malware WHERE ";
		// Used for checking which parameters should be added to query.
		Map<String, Object> searchKeys = new HashMap<>();
		// Check first parameter in query to avoid adding "AND" incorrectly in
		// query.
		Boolean firstValue = true;
		// List of parameter values that contain values from searchKeys.
		List<Object> searchKeyList = new ArrayList<>();
		// MalwareObject list to be generated from jdbcTemplate.
		List<MalwareObject> malwareList = null;
		// Checks is there at least one parameter defined.
		Boolean searchDefined = false;
		// Check is "name" parameter defined.
		if (name != null && !name.isEmpty()) {
			searchKeys.put("name", name);
			searchDefined = true;
		}
		// Check is "type" parameter defined.
		if (type != null && !type.isEmpty()) {
			searchKeys.put("type", type);
			searchDefined = true;
		}
		// Check is "platform" parameter defined.
		if (platform != null && !platform.isEmpty()) {
			searchKeys.put("platform", platform);
			searchDefined = true;
		}
		// Check is "source_language" parameter defined.
		if (sourceLanguage != null && !sourceLanguage.isEmpty()) {
			searchKeys.put("source_language", sourceLanguage);
			searchDefined = true;
		}
		// Check is "filetype" parameter defined.
		if (fileType != null && !fileType.isEmpty()) {
			searchKeys.put("file_type", fileType);
			searchDefined = true;
		}
		// Check is "size" parameter defined and bigger than 0.
		if (size != null && size > 0) {
			searchKeys.put("size", size);
			searchDefined = true;
		}
		// Check is "author" parameter defined.
		if (author != null && !author.isEmpty()) {
			searchKeys.put("author", author);
			searchDefined = true;
		}
		// Check is "origin" parameter defined.
		if (origin != null && !origin.isEmpty()) {
			searchKeys.put("origin", origin);
			searchDefined = true;
		}
		// Check is "date_discovered" parameter defined.
		if (dateDiscovery != null) {
			searchKeys.put("date_discovery", dateDiscovery);
			searchDefined = true;
		}
		// If at least one parameter exists, search.
		if (searchDefined) {
			// Add parameters to query and parameter values to list.
			// This should be immune against SQL injection due to no
			// user-defined values.
			for (String key : searchKeys.keySet()) {
				if (!firstValue) {
					searchQuery += " AND ";
				}
				firstValue = false;
				searchQuery += "`" + key + "`=?";
				searchKeyList.add(searchKeys.get(key));
			}
			// Array of parameters should be applied automatically in
			// jdbcTemplate.
			malwareList = DatabaseManager.searchMalwareList(jdbcTemplate, searchQuery, searchKeyList.toArray());
			model.addAttribute("malwareList", malwareList);
		}
		return "search";
	}
}
