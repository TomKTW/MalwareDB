package hr.tom.malwaredb.controller;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Date;
import java.util.zip.ZipInputStream;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import hr.tom.malwaredb.entity.DatabaseManager;
import hr.tom.malwaredb.entity.MalwareObject;
import hr.tom.malwaredb.entity.MessageConfig;
import hr.tom.malwaredb.entity.MessageType;

/**
 * Controller class used for pages related to editing entry.
 * 
 * @author Tom.K
 * 
 */
@Controller
public class EditController {

	@Autowired
	JdbcTemplate jdbcTemplate;

	@Autowired
	MessageSource messageSource;

	/**
	 * Generates "edit" template page, fetching data from DB.
	 * 
	 * @param model
	 *            Template model.
	 * @param id
	 *            Malware ID from DB.
	 * @return Template page "edit.html".
	 */
	@RequestMapping("/edit/{id}")
	public String edit(Model model, @PathVariable Integer id) {
		MalwareObject malware = DatabaseManager.getMalwareDetails(jdbcTemplate, id);
		model.addAttribute("malware", malware);
		return "edit";
	}

	/**
	 * Redirects to "/edit/id" along with editing entry.
	 * 
	 * @param model
	 *            Template model.
	 * @param redirectAttributes
	 *            Attributes to be applied on redirect page.
	 * @param malwareId
	 *            Malware ID from DB.
	 * @param name
	 *            Name of malware.
	 * @param type
	 *            Type of malware.
	 * @param platform
	 *            Platform of malware.
	 * @param sourceLanguage
	 *            Source language of malware.
	 * @param fileType
	 *            File type of malware.
	 * @param size
	 *            File size of malware.
	 * @param author
	 *            Author of malware.
	 * @param origin
	 *            Country origin of malware.
	 * @param dateDiscovery
	 *            Discovery date of malware.
	 * @param description
	 *            Description of malware.
	 * @return Redirect to /edit/id.
	 */
	@RequestMapping(value = "/edit/apply", method = RequestMethod.POST)
	public String applyChanges(Model model, RedirectAttributes redirectAttributes,
			@RequestParam("id") Integer malwareId, @RequestParam("name") String name, @RequestParam("type") String type,
			@RequestParam("platform") String platform, @RequestParam("source_language") String sourceLanguage,
			@RequestParam("file_type") String fileType, @RequestParam("size") Integer size,
			@RequestParam("author") String author, @RequestParam("origin") String origin,
			@RequestParam("date_discovery") @DateTimeFormat(pattern = "yyyy-MM-dd") Date dateDiscovery,
			@RequestParam("description") String description) {
		if (DatabaseManager.editEntry(jdbcTemplate, name, type, platform, sourceLanguage, fileType, size, author,
				origin, dateDiscovery, description, malwareId)) {
			MessageConfig.setMessage(redirectAttributes, messageSource, "message.edit.success", MessageType.INFO);
		} else {
			MessageConfig.setMessage(redirectAttributes, messageSource, "message.edit.failure", MessageType.ERROR);
		}
		return "redirect:/edit/" + malwareId;
	}

	/**
	 * Redirects to "/edit/id" along with adding alias to entry.
	 * 
	 * @param model
	 *            Template model.
	 * @param redirectAttributes
	 *            Attributes to be applied on redirect page.
	 * @param malwareId
	 *            Malware ID from DB.
	 * @param alias
	 *            Name of alias.
	 * @param author
	 *            Author of alias.
	 * @return Redirect to /edit/id.
	 */
	@RequestMapping(value = "/edit/addAlias", method = RequestMethod.POST)
	public String addAlias(Model model, RedirectAttributes redirectAttributes, @RequestParam("id") Integer malwareId,
			@RequestParam("alias") String alias, @RequestParam("author") String author) {
		if (DatabaseManager.addAliasEntry(jdbcTemplate, alias, author, malwareId)) {
			MessageConfig.setMessage(redirectAttributes, messageSource, "message.edit.add.alias.success",
					new Object[] { alias }, MessageType.INFO);
		} else {
			MessageConfig.setMessage(redirectAttributes, messageSource, "message.edit.add.alias.failure",
					new Object[] { alias }, MessageType.ERROR);
		}
		return "redirect:/edit/" + malwareId;
	}

	/**
	 * Redirects to "/edit/id" along with removing alias from entry.
	 * 
	 * @param model
	 *            Template model.
	 * @param redirectAttributes
	 *            Attributes to be applied on redirect page.
	 * @param malwareId
	 *            Malware ID from DB.
	 * @param aliasId
	 *            Alias ID from DB.
	 * @return Redirect to /edit/id.
	 */
	@RequestMapping(value = "/edit/removeAlias", method = RequestMethod.POST)
	public String removeAlias(Model model, RedirectAttributes redirectAttributes, @RequestParam("id") Integer malwareId,
			@RequestParam("alias_id") Integer aliasId) {
		if (DatabaseManager.removeAliasEntry(jdbcTemplate, aliasId, malwareId)) {
			MessageConfig.setMessage(redirectAttributes, messageSource, "message.edit.remove.alias.success",
					MessageType.INFO);
		} else {
			MessageConfig.setMessage(redirectAttributes, messageSource, "message.edit.remove.alias.failure",
					MessageType.ERROR);
		}
		return "redirect:/edit/" + malwareId;
	}

	/**
	 * Redirects to "/edit/id" along with adding media to entry.
	 * 
	 * @param model
	 *            Template model.
	 * @param redirectAttributes
	 *            Attributes to be applied on redirect page.
	 * @param malwareId
	 *            Malware ID from DB.
	 * @param source
	 *            Source of media.
	 * @param caption
	 *            Caption of media.
	 * @param type
	 *            Type of media.
	 * @return Redirect to /edit/id.
	 */
	@RequestMapping(value = "/edit/addMedia", method = RequestMethod.POST)
	public String addMedia(Model model, RedirectAttributes redirectAttributes, @RequestParam("id") Integer malwareId,
			@RequestParam("source") String source, @RequestParam("caption") String caption,
			@RequestParam("type") String type) {
		if (DatabaseManager.addMediaEntry(jdbcTemplate, source, caption, type, malwareId)) {
			MessageConfig.setMessage(redirectAttributes, messageSource, "message.edit.add.media.success",
					new Object[] { caption }, MessageType.INFO);
		} else {
			MessageConfig.setMessage(redirectAttributes, messageSource, "message.edit.add.media.failure",
					new Object[] { caption }, MessageType.ERROR);
		}
		return "redirect:/edit/" + malwareId;
	}

	/**
	 * Redirects to "/edit/id" along with removing media from entry.
	 * 
	 * @param model
	 *            Template model.
	 * @param redirectAttributes
	 *            Attributes to be applied on redirect page.
	 * @param malwareId
	 *            Malware ID from DB.
	 * @param mediaId
	 *            Media ID from DB.
	 * @return Redirect to /edit/id.
	 */
	@RequestMapping(value = "/edit/removeMedia", method = RequestMethod.POST)
	public String removeMedia(Model model, RedirectAttributes redirectAttributes, @RequestParam("id") Integer malwareId,
			@RequestParam("media_id") Integer mediaId) {
		if (DatabaseManager.removeMediaEntry(jdbcTemplate, mediaId, malwareId)) {
			MessageConfig.setMessage(redirectAttributes, messageSource, "message.edit.remove.media.success",
					MessageType.INFO);
		} else {
			MessageConfig.setMessage(redirectAttributes, messageSource, "message.edit.remove.media.failure",
					MessageType.ERROR);
		}
		return "redirect:/edit/" + malwareId;
	}

	/**
	 * Redirects to "/edit/id" along with uploading Zip-only file as sample for
	 * specified entry.
	 * 
	 * @param model
	 *            Template model.
	 * @param redirectAttributes
	 *            Attributes to be applied on redirect page.
	 * @param file
	 *            File for upload.
	 * @param malwareId
	 *            Malware ID from DB.
	 * @return Redirect to /edit/id.
	 */
	@RequestMapping(value = "/edit/upload", method = RequestMethod.POST)
	public String uploadFile(Model model, RedirectAttributes redirectAttributes, MultipartFile file,
			@RequestParam("id") Integer malwareId) {
		// Define upload path.
		String uploadPath = "upload" + "/" + malwareId;
		File malwareIdFolder = new File(uploadPath);
		if (!file.isEmpty()) {
			// Create upload folder if the folder itself doesn't exist.
			malwareIdFolder.mkdir();
			try {
				// ZipInputStream works only with Zip compressed files.
				// Load file to ZipInputStream.
				ZipInputStream zipStream = new ZipInputStream(file.getInputStream());
				// If ZipInputStream function for getting next entry ends with
				// null, it's not Zip file.
				if (zipStream.getNextEntry() != null) {
					// If it is Zip file, copy the file to upload path with name
					// of malware ID.
					// Overwrite if file exists, keep single file only.
					Files.copy(file.getInputStream(), Paths.get(uploadPath, malwareId.toString()),
							StandardCopyOption.REPLACE_EXISTING);
					MessageConfig.setMessage(redirectAttributes, messageSource, "message.edit.upload.success",
							MessageType.INFO);
				} else {
					MessageConfig.setMessage(redirectAttributes, messageSource, "message.edit.upload.failure",
							new Object[] { "Not a ZIP file." }, MessageType.ERROR);
				}
			} catch (IOException e) {
				MessageConfig.setMessage(redirectAttributes, messageSource, "message.edit.upload.failure",
						new Object[] { "Unable to read file." }, MessageType.ERROR);
				e.printStackTrace();
			}
		} else {
			MessageConfig.setMessage(redirectAttributes, messageSource, "message.edit.upload.failure",
					new Object[] { "No file selected." }, MessageType.ERROR);
		}
		return "redirect:/edit/" + malwareId;
	}
}
