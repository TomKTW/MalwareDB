package hr.tom.malwaredb;

import java.util.Locale;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.servlet.LocaleResolver;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.i18n.LocaleChangeInterceptor;
import org.springframework.web.servlet.i18n.SessionLocaleResolver;
import org.thymeleaf.extras.springsecurity4.dialect.SpringSecurityDialect;

/**
 * Main class, used for starting web application and setting up configuration.
 * 
 * @author Tom.K
 *
 */
@SpringBootApplication
public class LabApplication extends WebMvcConfigurerAdapter {

	/**
	 * Main function, starts the server.
	 * 
	 * @param args
	 *            Unused.
	 */
	public static void main(String[] args) {
		SpringApplication.run(LabApplication.class, args);
	}

	/**
	 * Sets locale to "en_US" as default, used for messages template.
	 * 
	 * @return LocaleResolver with default locale as "en_US".
	 */
	@Bean
	public LocaleResolver localeResolver() {
		SessionLocaleResolver localeResolver = new SessionLocaleResolver();
		Locale defaultLocale = Locale.US;
		localeResolver.setDefaultLocale(defaultLocale);
		return localeResolver;
	}

	/**
	 * Defines parameter to be used in URL to define locale, which is "lang".
	 * 
	 * @return LocaleChangeInterceptor with defined parameter "lang".
	 */
	@Bean
	public LocaleChangeInterceptor localeChangeInterceptor() {
		LocaleChangeInterceptor localeChangeInterceptor = new LocaleChangeInterceptor();
		localeChangeInterceptor.setParamName("lang");
		return localeChangeInterceptor;
	}

	/**
	 * Initializes SpringSecurityDialect object for password encoder.
	 * 
	 * @return Initialized SpringSecurityDialect object.
	 */
	@Bean
	public SpringSecurityDialect springSecurityDialect() {
		return new SpringSecurityDialect();
	}

	/**
	 * Initializes bcrypt password encoder object.
	 * 
	 * @return Initialized BCryptPasswordEncoder object.
	 */
	@Bean
	public BCryptPasswordEncoder bCryptPasswordEncoder() {
		return new BCryptPasswordEncoder();
	}

	/**
	 * Adds LocaleChangeInterceptor to registry.
	 */
	@Override
	public void addInterceptors(InterceptorRegistry registry) {
		registry.addInterceptor(localeChangeInterceptor());
	}
}
