package hr.tom.lab.entity;

import java.sql.ResultSet;
import java.util.Date;
import java.util.List;

import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;

/**
 * Class with static methods to manage database.
 * 
 * @author Tom.K
 *
 */
public class DatabaseManager {

	/**
	 * Returns a list of MalwareObjects from DB.
	 * 
	 * @param jdbcTemplate
	 *            JdbcTemplate object.
	 * @return List of MalwareObjects.
	 */
	public static List<MalwareObject> getMalwareList(JdbcTemplate jdbcTemplate) {
		List<MalwareObject> malwareList = jdbcTemplate.query(
				"SELECT `id`,`name`,`type`,`platform`,`source_language`,`file_type`,`size`,`author`,`origin`,`date_discovery` FROM malware",
				(ResultSet rs, int rowNum) -> {
					MalwareObject malwareObject = new MalwareObject();
					malwareObject.setId(rs.getInt("id"));
					malwareObject.setName(rs.getString("name"));
					malwareObject.setType(rs.getString("type"));
					malwareObject.setPlatform(rs.getString("platform"));
					malwareObject.setSourceLanguage(rs.getString("source_language"));
					malwareObject.setFileType(rs.getString("file_type"));
					malwareObject.setSize(rs.getInt("size"));
					malwareObject.setAuthor(rs.getString("author"));
					malwareObject.setOrigin(rs.getString("origin"));
					malwareObject.setDateDiscovery(rs.getDate("date_discovery"));
					return malwareObject;
				});
		return malwareList;
	}

	/**
	 * Returns a MalwareObject from DB.
	 * 
	 * @param jdbcTemplate
	 *            JdbcTemplate object.
	 * @param malwareId
	 *            Malware ID from DB.
	 * @return MalwareObject from specific malwareId.
	 */
	public static MalwareObject getMalwareDetails(JdbcTemplate jdbcTemplate, Integer malwareId) {
		List<MalwareObject> malwareList = jdbcTemplate.query(
				"SELECT `id`,`name`,`type`,`platform`,`source_language`,`file_type`,`size`,`author`,`origin`,`date_discovery`,`description` FROM malware WHERE id=?",
				new Object[] { malwareId }, (ResultSet rs, int rowNum) -> {
					MalwareObject malwareObject = new MalwareObject();
					malwareObject.setId(rs.getInt("id"));
					malwareObject.setName(rs.getString("name"));
					malwareObject.setType(rs.getString("type"));
					malwareObject.setPlatform(rs.getString("platform"));
					malwareObject.setSourceLanguage(rs.getString("source_language"));
					malwareObject.setFileType(rs.getString("file_type"));
					malwareObject.setSize(rs.getInt("size"));
					malwareObject.setAuthor(rs.getString("author"));
					malwareObject.setOrigin(rs.getString("origin"));
					malwareObject.setDateDiscovery(rs.getDate("date_discovery"));
					malwareObject.setDescription(rs.getString("description"));
					malwareObject.setAliases(getMalwareAliasList(jdbcTemplate, malwareId));
					malwareObject.setMedia(getMalwareMediaList(jdbcTemplate, malwareId));
					return malwareObject;
				});
		return malwareList.isEmpty() ? null : malwareList.get(0);
	}

	/**
	 * Returns a list of AliasObjects from DB.
	 * 
	 * @param jdbcTemplate
	 *            JdbcTemplate object.
	 * @param malwareId
	 *            Malware ID from DB.
	 * @return List of AliasObjects from specific malwareId.
	 */
	public static List<AliasObject> getMalwareAliasList(JdbcTemplate jdbcTemplate, Integer malwareId) {
		List<AliasObject> aliasList = jdbcTemplate.query(
				"SELECT `id`,`name`,`author` FROM `alias` WHERE `malware_id`=?", new Object[] { malwareId },
				(ResultSet rs, int rowNum) -> {
					AliasObject aliasObject = new AliasObject();
					aliasObject.setId(rs.getInt("id"));
					aliasObject.setName(rs.getString("name"));
					aliasObject.setAuthor(rs.getString("author"));
					return aliasObject;
				});
		return aliasList;
	}

	/**
	 * Returns a list of MediaObjects from DB.
	 * 
	 * @param jdbcTemplate
	 *            JdbcTemplate object.
	 * @param malwareId
	 *            Malware ID from DB.
	 * @return List of MediaObjects from specific malwareId.
	 */
	public static List<MediaObject> getMalwareMediaList(JdbcTemplate jdbcTemplate, Integer malwareId) {
		List<MediaObject> mediaList = jdbcTemplate.query(
				"SELECT `id`,`source`,`caption`,`type` FROM `media` WHERE `malware_id`=?", new Object[] { malwareId },
				(ResultSet rs, int rowNum) -> {
					MediaObject mediaObject = new MediaObject();
					mediaObject.setId(rs.getInt("id"));
					mediaObject.setSource(rs.getString("source"));
					mediaObject.setCaption(rs.getString("caption"));
					mediaObject.setType(rs.getString("type"));
					return mediaObject;
				});
		return mediaList;
	}

	/**
	 * Returns a list of MalwareObjects from DB by searching specified values.
	 * 
	 * @param jdbcTemplate
	 *            JdbcTemplate object.
	 * @param query
	 *            Query used for searching.
	 * @param args
	 *            Values to search.
	 * @return List of MalwareObjects from specified values.
	 */
	public static List<MalwareObject> searchMalwareList(JdbcTemplate jdbcTemplate, String query, Object[] args) {
		List<MalwareObject> malwareList = jdbcTemplate.query(query, args, (ResultSet rs, int rowNum) -> {
			MalwareObject malwareObject = new MalwareObject();
			malwareObject.setId(rs.getInt("id"));
			malwareObject.setName(rs.getString("name"));
			malwareObject.setType(rs.getString("type"));
			malwareObject.setPlatform(rs.getString("platform"));
			malwareObject.setSourceLanguage(rs.getString("source_language"));
			malwareObject.setFileType(rs.getString("file_type"));
			malwareObject.setSize(rs.getInt("size"));
			malwareObject.setAuthor(rs.getString("author"));
			malwareObject.setOrigin(rs.getString("origin"));
			malwareObject.setDateDiscovery(rs.getDate("date_discovery"));
			return malwareObject;
		});
		return malwareList;
	}

	/**
	 * Returns UserObject from DB defined with username and password.
	 * 
	 * @param jdbcTemplate
	 *            JdbcTemplate object.
	 * @param username
	 *            User's username.
	 * @param password
	 *            User's password.
	 * @return UserObject if found in database, otherwise null.
	 */
	public static UserObject getUserAuth(JdbcTemplate jdbcTemplate, String username, String password) {
		List<UserObject> userList = jdbcTemplate.query(
				"SELECT `id`, `username`, `level` FROM `user` WHERE `username`=? AND `password`=PASSWORD(?)",
				new Object[] { username, password }, (ResultSet rs, int rowNum) -> {
					UserObject userObject = new UserObject();
					userObject.setId(rs.getInt("id"));
					userObject.setUsername(rs.getString("username"));
					userObject.setLevel(rs.getInt("level"));
					return userObject;
				});
		return userList.isEmpty() ? null : userList.get(0);
	}

	/**
	 * Creates new entry in 'malware' table from specified values.
	 * 
	 * @param jdbcTemplate
	 *            JdbcTemplate object.
	 * @param name
	 *            Name of malware.
	 * @param type
	 *            Type of malware.
	 * @param platform
	 *            Platform of malware.
	 * @param sourceLanguage
	 *            Source language of malware.
	 * @param fileType
	 *            File type of malware.
	 * @param size
	 *            File size of malware.
	 * @param author
	 *            Author of malware.
	 * @param origin
	 *            Country origin of malware.
	 * @param dateDiscovery
	 *            Discovery date of malware.
	 * @param description
	 *            Description of malware.
	 * @return Boolean value of successful operation.
	 */
	public static Boolean createEntry(JdbcTemplate jdbcTemplate, String name, String type, String platform,
			String sourceLanguage, String fileType, Integer size, String author, String origin, Date dateDiscovery,
			String description) {
		try {
			jdbcTemplate.update(
					"INSERT INTO `malware` (name, type, platform, source_language, file_type, size, author, origin, date_discovery, description) VALUES (?,?,?,?,?,?,?,?,?,?)",
					name, type, platform, sourceLanguage, fileType, size, author, origin, dateDiscovery, description);
			return true;
		} catch (DataAccessException e) {
			return false;
		}
	}

	/**
	 * Updates existing entry in 'malware' table from specified values.
	 * 
	 * @param jdbcTemplate
	 *            JdbcTemplate object.
	 * @param name
	 *            Name of malware.
	 * @param type
	 *            Type of malware.
	 * @param platform
	 *            Platform of malware.
	 * @param sourceLanguage
	 *            Source language of malware.
	 * @param fileType
	 *            File type of malware.
	 * @param size
	 *            File size of malware.
	 * @param author
	 *            Author of malware.
	 * @param origin
	 *            Country origin of malware.
	 * @param dateDiscovery
	 *            Discovery date of malware.
	 * @param description
	 *            Description of malware.
	 * @param malwareId
	 *            Malware ID from DB.
	 */
	public static Boolean editEntry(JdbcTemplate jdbcTemplate, String name, String type, String platform,
			String sourceLanguage, String fileType, Integer size, String author, String origin, Date dateDiscovery,
			String description, Integer malwareId) {
		try {
			jdbcTemplate.update(
					"UPDATE `malware` SET `name`=?,`type`=?,`platform`=?,`source_language`=?,`file_type`=?,`size`=?,`author`=?,`origin`=?,`date_discovery`=?, `description`=? WHERE `id`=?",
					name, type, platform, sourceLanguage, fileType, size, author, origin, dateDiscovery, description,
					malwareId);
			return true;
		} catch (DataAccessException e) {
			return false;
		}
	}

	/**
	 * Adds new alias in 'alias' table from specified values.
	 * 
	 * @param jdbcTemplate
	 *            JdbcTemplate object.
	 * @param name
	 *            Name of alias.
	 * @param author
	 *            Author of alias.
	 * @param malwareId
	 *            Malware ID from DB.
	 */
	public static void addAliasEntry(JdbcTemplate jdbcTemplate, String name, String author, Integer malwareId) {
		jdbcTemplate.update("INSERT INTO `alias` (`name`, `author`, `malware_id`) VALUES (?,?,?)", name, author,
				malwareId);
	}

	/**
	 * Removes existing alias in 'alias' table from specified values.
	 * 
	 * @param jdbcTemplate
	 *            JdbcTemplate object.
	 * @param aliasId
	 *            Alias ID from DB.
	 * @param malwareId
	 *            Malware ID from DB.
	 */
	public static void removeAliasEntry(JdbcTemplate jdbcTemplate, Integer aliasId, Integer malwareId) {
		jdbcTemplate.update("DELETE FROM `alias` WHERE id=? AND malware_id=?", aliasId, malwareId);
	}

	/**
	 * Adds new media in 'media' table from specified values.
	 * 
	 * @param jdbcTemplate
	 *            JdbcTemplate object.
	 * @param source
	 *            Source of media.
	 * @param caption
	 *            Caption of media.
	 * @param type
	 *            Type of media.
	 * @param malwareId
	 *            Malware ID from DB.
	 */
	public static void addMediaEntry(JdbcTemplate jdbcTemplate, String source, String caption, String type,
			Integer malwareId) {
		jdbcTemplate.update("INSERT INTO `media` (`source`, `caption`, `type`, `malware_id`) VALUES (?,?,?,?)", source,
				caption, type, malwareId);
	}

	/**
	 * Removes existing media in 'media' table from specified values.
	 * 
	 * @param jdbcTemplate
	 *            JdbcTemplate object.
	 * @param mediaId
	 *            Media ID from DB.
	 * @param malwareId
	 *            Malware ID from DB.
	 */
	public static void removeMediaEntry(JdbcTemplate jdbcTemplate, Integer mediaId, Integer malwareId) {
		jdbcTemplate.update("DELETE FROM `media` WHERE id=? AND malware_id=?", mediaId, malwareId);
	}
}
