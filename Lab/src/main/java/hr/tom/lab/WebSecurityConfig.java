package hr.tom.lab;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

/**
 * SpringSecurity configuration class, used for setting up security.
 * 
 * @author Tom.K
 *
 */
@Configuration
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	DataSource dataSource;

	@Autowired
	BCryptPasswordEncoder bcryptEncoder;

	/**
	 * Configures access permissions for mapped web requests and login page.
	 */
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests()
				// Admin-only pages
				.antMatchers("/admin").hasRole("ADMIN")
				.antMatchers("/admin/*").hasRole("ADMIN")
				// Authenticated-only (User) pages
				.antMatchers("/edit").authenticated()
				.antMatchers("/edit/*").authenticated()
				.antMatchers("/create").authenticated()
				.antMatchers("/download/*").authenticated()
				.antMatchers("/delete/*").authenticated()
				// Public (no authentication) pages
				.antMatchers("/details/*").permitAll()
				.antMatchers("/search").permitAll()
				.antMatchers("/register").permitAll()
				// Configure login and logout pages (public access).
				.and().formLogin().loginPage("/login").permitAll()
				.and().logout().permitAll();
	}

	/**
	 * Configures authentication sources and process. JDBC authentication is
	 * used, therefore users and roles are fetched from defined queries.
	 * 
	 * @param auth
	 *            Used for configuring authentication process.
	 * @throws Exception
	 */
	@Autowired
	public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
		auth.jdbcAuthentication().dataSource(dataSource)
				// Enabled variable is used to determine is user login permitted or not.
				.usersByUsernameQuery("SELECT username, password, enabled FROM users WHERE username = ? AND enabled = 1")
				// Fetching user roles.
				.authoritiesByUsernameQuery("SELECT username, role FROM user_roles WHERE username = ?")
				// Using bcrypt password encoder to protect passwords in DB.
				.passwordEncoder(bcryptEncoder);
	}
}
