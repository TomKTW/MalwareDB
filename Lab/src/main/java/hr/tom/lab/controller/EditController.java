package hr.tom.lab.controller;

import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import hr.tom.lab.entity.DatabaseManager;
import hr.tom.lab.entity.MalwareObject;
import hr.tom.lab.entity.MessageConfig;
import hr.tom.lab.entity.MessageType;

/**
 * Controller class used for pages related to editing article.
 * 
 * @author Tom.K
 * 
 */
@Controller
public class EditController {

	@Autowired
	JdbcTemplate jdbcTemplate;

	@Autowired
	MessageSource messageSource;

	/**
	 * Generates "edit" template page, fetching data from DB.
	 * 
	 * @param model
	 *            Template model.
	 * @param id
	 *            Malware ID from DB.
	 * @return Template page "edit.html".
	 */
	@RequestMapping("/edit/{id}")
	public String edit(Model model, @PathVariable Integer id) {
		MalwareObject malware = DatabaseManager.getMalwareDetails(jdbcTemplate, id);
		model.addAttribute("malware", malware);
		return "edit";
	}

	/**
	 * Generates "edit" template page, along with editing article data.
	 * 
	 * @param model
	 *            Template model.
	 * @param malwareId
	 *            Malware ID from DB.
	 * @param name
	 *            Name of malware.
	 * @param type
	 *            Type of malware.
	 * @param platform
	 *            Platform of malware.
	 * @param sourceLanguage
	 *            Source language of malware.
	 * @param fileType
	 *            File type of malware.
	 * @param size
	 *            File size of malware.
	 * @param author
	 *            Author of malware.
	 * @param origin
	 *            Country origin of malware.
	 * @param dateDiscovery
	 *            Discovery date of malware.
	 * @param description
	 *            Description of malware.
	 * @return Template page "edit.html" from edit function.
	 */
	@RequestMapping(value = "/edit/apply", method = RequestMethod.POST)
	public String applyChanges(Model model, @RequestParam("id") Integer malwareId, @RequestParam("name") String name,
			@RequestParam("type") String type, @RequestParam("platform") String platform,
			@RequestParam("source_language") String sourceLanguage, @RequestParam("file_type") String fileType,
			@RequestParam("size") Integer size, @RequestParam("author") String author,
			@RequestParam("origin") String origin,
			@RequestParam("date_discovery") @DateTimeFormat(pattern = "yyyy-MM-dd") Date dateDiscovery,
			@RequestParam("description") String description) {
		DatabaseManager.editEntry(jdbcTemplate, name, type, platform, sourceLanguage, fileType, size, author, origin,
				dateDiscovery, description, malwareId);
		MessageConfig.setMessage(model,
				messageSource.getMessage("message.apply.success", null, LocaleContextHolder.getLocale()),
				MessageType.INFO);
		return edit(model, malwareId);
	}

	/**
	 * Generates "edit" template page, along with adding alias to selected
	 * article.
	 * 
	 * @param model
	 *            Template model.
	 * @param malwareId
	 *            Malware ID from DB.
	 * @param alias
	 *            Name of alias.
	 * @param author
	 *            Author of alias.
	 * @return Template page "edit.html" from edit function.
	 */
	@RequestMapping(value = "/edit/addAlias")
	public String addAlias(Model model, @RequestParam("id") Integer malwareId, @RequestParam("alias") String alias,
			@RequestParam("author") String author) {
		DatabaseManager.addAliasEntry(jdbcTemplate, alias, author, malwareId);
		MessageConfig.setMessage(model, messageSource.getMessage("message.add.success", new Object[] { alias },
				LocaleContextHolder.getLocale()), MessageType.INFO);
		return edit(model, malwareId);
	}

	/**
	 * Generates "edit" template page, along with removing alias from selected
	 * article.
	 * 
	 * @param model
	 *            Template model.
	 * @param malwareId
	 *            Malware ID from DB.
	 * @param aliasId
	 *            Alias ID from DB.
	 * @return Template page "edit.html" from edit function.
	 */
	@RequestMapping(value = "/edit/removeAlias")
	public String removeAlias(Model model, @RequestParam("id") Integer malwareId,
			@RequestParam("alias_id") Integer aliasId) {
		DatabaseManager.removeAliasEntry(jdbcTemplate, aliasId, malwareId);
		MessageConfig.setMessage(model,
				messageSource.getMessage("message.remove.success", null, LocaleContextHolder.getLocale()),
				MessageType.INFO);
		return edit(model, malwareId);
	}

	/**
	 * Generates "edit" template page, along with adding media to selected
	 * article.
	 * 
	 * @param model
	 *            Template model.
	 * @param malwareId
	 *            Malware ID from DB.
	 * @param source
	 *            Source of media.
	 * @param caption
	 *            Caption of media.
	 * @param type
	 *            Type of media.
	 * @return Template page "edit.html" from edit function.
	 */
	@RequestMapping(value = "/edit/addMedia")
	public String addMedia(Model model, @RequestParam("id") Integer malwareId, @RequestParam("source") String source,
			@RequestParam("caption") String caption, @RequestParam("type") String type) {
		DatabaseManager.addMediaEntry(jdbcTemplate, source, caption, type, malwareId);
		MessageConfig.setMessage(model, messageSource.getMessage("message.add.success", new Object[] { caption },
				LocaleContextHolder.getLocale()), MessageType.INFO);
		return edit(model, malwareId);
	}

	/**
	 * Generates "edit" template page, along with removing media from selected
	 * article.
	 * 
	 * @param model
	 *            Template model.
	 * @param malwareId
	 *            Malware ID from DB.
	 * @param mediaId
	 *            Media ID from DB.
	 * @return Template page "edit.html" from edit function.
	 */
	@RequestMapping(value = "/edit/removeMedia")
	public String removeMedia(Model model, @RequestParam("id") Integer malwareId,
			@RequestParam("media_id") Integer mediaId) {
		DatabaseManager.removeMediaEntry(jdbcTemplate, mediaId, malwareId);
		MessageConfig.setMessage(model,
				messageSource.getMessage("message.remove.success", null, LocaleContextHolder.getLocale()),
				MessageType.INFO);
		return edit(model, malwareId);
	}
}
