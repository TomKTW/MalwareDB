package hr.tom.lab.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import hr.tom.lab.entity.MessageConfig;
import hr.tom.lab.entity.MessageType;

/**
 * Controller class used for login pages.
 * 
 * @author Tom.K
 *
 */
@Controller
public class LoginController {

	@Autowired
	JdbcTemplate jdbcTemplate;

	@Autowired
	MessageSource messageSource;

	/**
	 * Generates "login" template page. TODO: Explain.
	 * 
	 * @param model
	 *            Template model.
	 * @return Template page "login.html".
	 */
	@RequestMapping("/login")
	public String login(Model model, @RequestParam(value = "logout", required = false) Object logout,
			@RequestParam(value = "error", required = false) Object error) {
		if (logout != null) {
			MessageConfig.setMessage(model, messageSource, "message.logout.success", MessageType.INFO);
		} else if (error != null) {
			MessageConfig.setMessage(model, messageSource, "message.login.error", MessageType.ERROR);
		}
		return "login";
	}

	/**
	 * Generates "response" or "login" template page depending on login attempt.
	 * If authentication failed, redirects back to login page with error
	 * message. Otherwise, it redirects to response page with success message.
	 * 
	 * @param model
	 *            Template model.
	 * @param session
	 *            Current session to save credentials.
	 * @param username
	 *            Username for login.
	 * @param password
	 *            Password for login.
	 * @return Template page "response.html" if logged in, otherwise
	 *         "login.html".
	 */
	/*
	 * @RequestMapping("/auth") public String loginAttempt(Model model,
	 * HttpSession session,
	 * 
	 * @RequestParam(value = "username", required = true) String username,
	 * 
	 * @RequestParam(value = "password", required = true) String password) {
	 * UserObject userObject = DatabaseManager.getUserAuth(jdbcTemplate,
	 * username, password); if (userObject != null) {
	 * SessionConfig.setLoginSession(session, userObject.getUsername(),
	 * userObject.getLevel(), true); MessageConfig.setMessage( model,
	 * messageSource.getMessage("message.login.success", new Object[] {
	 * session.getAttribute("user") }, LocaleContextHolder.getLocale()),
	 * MessageType.INFO, "/"); return "response"; } else {
	 * SessionConfig.setLoginSession(session, UserObject.GUEST,
	 * UserObject.GUEST_LEVEL, false); MessageConfig.setMessage(model,
	 * messageSource.getMessage("message.login.error", null,
	 * LocaleContextHolder.getLocale()), MessageType.ERROR); return "login"; } }
	 */

	/**
	 * Generates "response" template page for logout
	 * 
	 * @param model
	 *            Template model.
	 * @param session
	 *            Current session to save credentials.
	 * @return Template page "response.html".
	 */
	/*
	 * @RequestMapping("/logout") public String logout(Model model, HttpSession
	 * session) { SessionConfig.setLoginSession(session, "guest", -1, false);
	 * MessageConfig.setMessage(model, "User logged out.", MessageType.INFO,
	 * "/login"); return "response"; }
	 */
}
